socket() – Използва се за създаване на комуникационен канал от тип „конекция“. Създава сокет (крайна точка за комуникация) и връща файловия дескриптор, асоцииран с него.

bind() – Присвоява адрес на сокет, създаден със socket(). Това извикване се използва за сървърите в конекцията, изградена със socket(), а при клиентите не е необходимо. Тази операция се нарича “именуване на сокет”.

connect() – Свързва сокета, посочен от файловия дескриптор, подаден като аргумент, към адреса на сокета, подаден като аргумент.

listen() – Означава сокета, подаден като аргумент, като готов да приема нови входящи заявки за свързване.

accept() – Блокиращо повикване, което чака входящи връзки. След като заявката за връзка бъде обработена, нов файлов дескриптор се връща. Този нов сокет е свързан с клиента (установена е конекцията), а другият сокет остава в състояние listen в очакване на допълнителни връзки.


------------

/etc – съдържа конфигурационните файлове, информация за потребителите, пароли и т.н.

/dev – съдържа драйверите на системата; в нея се описват устройствата, които са част от изчислителната система; съдържа псевдо файлове, които задават какъв хардуер може да бъде обслужван от нашата система и какъв точно се обслужва

/var - системни файлове - logging files, mail directories, printer spool, etc.; за данни, не на потребителя, а за споделени данни

/boot – информация за ОС преди самото й стартиране; неща, свързани със зареждането на операционната система

/usr/bin – съдържа повечето изпълними файлове, които не са необходими за стартиране или поправяне на системата

/home – home директориите на потребителите в системата; файловете на конкретните потребители

/usr/lib – обектни файлове и библиотеки; може да включва и вътрешни двоични файлове, които не са предназначени да бъдат изпълнявани директно от потребители или shell скриптове

/var/log – директорията, съдържаща всички log (журнални) файлове

/proc – информация за операционната система в реално време; съдържа псевдо файлове със статистическа информация от ядрото

/bin – съдържа изпълними файлове; важни програми, които се изпълняват при стартирането на системата, общодостъпни програми

/usr/doc – съдържа всичката необходима документация.

------------

who – показва активните потребители в момента на извикване

ps – показва подробна извадка за процесите в ОС в момента на извикване

top – подобна на командата ps, показва подробна информация за процесите в ОС в реално време

vi – отваря на конзолата текстов редактор

gcc – компилира програми, написани на C и C++ код

------------

Семафорът е абстрактен механизъм от високо ниво за синхронизация на процеси, използващи общи ресурси. Основава се на принципа за приспиване и събуждане на процес. Трябват за реализацията брояч, опашка за приспаните процеси, методите init(int), signal, wait

Семафорът е силен ако е нормална опашка и слаб ако е приоритетна


ЗАДАЧА: Читатели и писатели:
условие: има читатели и писатели и ако има писател в стаята , то няма никой друг
идея: читателите си влизат нормално освен ако няма писател някъде по опашката. Ако има такъв, то той влиза следващ след като читателите, които са вече вътре излязат.
реализация: *има качена снимка*

------------

Хардуерни инструменти за защита (lock) на ресурс:
(а) enable/disable interrupt
Инстукрцията блокира временно прекъсванията. Когато се влезе в режим на работата в ядрото, кода извиква процедура от ядрото да го изпълни и може да се сложи в опашката инструкция да спре и да пусне прекъсванията. (пример с клавиатурата)
(b) test and set
Тази инструкция се използва, за да се пише в паметта и да се върне старата стойност като атомарна операция.
(c) atomic swap
Атомарната инструкция се използва да се постигне синхронизация. Тя сравнява съдържанието на локация в паметта с дадена стойност и само ако са същите, модифицира съдържанието с новата стойност.

------------

Inode е указател към таблица, която се състои от 2 части: атрибути и указатели (адресна таблица)

Самият твърд диск се състои от няколко области: група inodes (които от своя страна са разделени на отделни области), по-голяма област със сектори, които съдържат метаданни и две служебни зони, в които да се запише информация за това кои сектори са свободни и кои inodes са свободни.
Придвижването на главата на това устройство от една пътечка на друга е механично и става бавно; Всяка пътечка е разделена на няколко сектора от по 512 или 1024 байта; Софтуера знае колко е голям сектора и колко е времето за преминаване от един до друг сектор; Файла се представя като много сектори; Файлът се разполага там където може, процесът на разхвърляне се нарича фрагментация.

какви атрибути имат файловете в съвременна файлова система, реализирана върху блочно устройство (block device) => име, съдържание, права за достъп, информация за собственост, група, размер, дата на създаване, дата на последна промяна, дата на достъпване

Алгоритъмът на асансьора се изразява в следното: Разместват се така заявките към четене и писане, че главата да изминава минимално разстояние; Има две приоритетни опашки: едната се състои от файлове, които се намират по посока на движението на главата, а другата от файлове, които се намират в обратната посока; Ако е празна главата на опашката по посока на главата на устройството, то се сменя посоката.


------------

превключване става като на все се дава време. процес може да е спящ(блокиран/чакащ), активен - да се събуди или по-точно да бъде събуден от друг процес
running, sleeping, stopped(не е от интерес и е спрян), zombie(в процес на спиране)

spinlock, semaphore




